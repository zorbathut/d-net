---- Major work path
- get rid of TEST
- undef CHECK/TEST in vector
- Tanks drive through each other? What madness is this?
- Collision/subtraction grid
- Mine deployment range
- Cached shop demo stats
- Better mine demo
- EMP demo
- Gradual shop spawning
  - Remove bombardment from 2 player, make it cheaper for 3 and 4
- Pull glory explody into its own deploy?
- Next-gen weapons
- Faction info screen on startup
- Training/certificates/discounts
- Many many more weapons
- Make small text thicker
- Implants?

---- Things that take thought and musing
- GameAccessors class
- store accumulation in Tank, not Player, for a round
- Tweekvalues?
- Normalize controller to circle?
- Game inheritance/abstraction?
- Make DPS a little less flickery
- Improve win ticker so it displays overall totals somewhere maybe
- Demo screen for upgrades
- Slide-along-walls track simulation?
- "Kill graph"

---- Maintenance, minor bugfix, braindead
- Set your keys/buttons changing
- Enforce prefixes? projectile.blah etc etc etc
- AI shouldn't try to buy the items it already owns/smarter about shops
- Buy menu flicker? Double-buffering?
- Extricate coord.h and float.h from more headers
- De-inline stuff in coord.h and float.h
- Winner list better special effects
- Winner list better "null" icon
- Color for projectile impacts
- Make explosion removals include the focus point

---- Things that may or may not be needed
- Stop reloading files in findLevels
- Move stuff in tank small mode around a bit
- Add tank sell depreciation
- Special unique bonuses (turned the most, closest to death, most/least accurate, traveler, tunneler, deadeye, kamikaze)

---- Major but unimportant ATM
- Halos?
- Sound, yo
- Absolute mode config
- Holy crap! Self-intersecting! Cry!
- Netplay (NOTE: shop demos change random state!)
- Consistent-ize line width effects, colors, rendering in general
- Level save snapshots - how should this work? I'm still not sure.
- dnd compression - this is going to rely on level save snapshots

http://www.itchstudios.com/psg/ - Dafred's artist



--- New collision notes

Okay, first off. Collision objects are mapped as "owner, type, ID". Each of these is handled as a group. Some of them are temporary, some are persistent, this is determined on a case-by-case basis by some kind of flag. Temporary ones vanish after one frame, persistent ones stick around until they're explicitly removed.

From owner/type/ID I need to be able to get the actual item. So, Projectile should become map<pair<int, int>, Projectile>? And then I need vector<ProjectileIDer>.

Alternatively, vector<ProjectilePack> where ProjectilePack includes both the IDer and a map<int, Projectile>. Or a set<Projectile> with a neat comparator.

This gets passed into the Collider, which stores data in map<OwnerType, map<ID, vector<pair<Coord4, Coord4> > > > or whatever. This is traversed roughly the same way as it is right now.

Eugh.