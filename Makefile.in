
STDCXXFLAGS := @STDCXXFLAGS@ -DDPRINTF_MARKUP -Wall -Wno-sign-compare -Wno-uninitialized -g -O2
STDLDFLAGS := @STDLDFLAGS@ -g -O2 -Wl,--as-needed

GAMESOURCES := main core game timer debug gfx collide gamemap util rng args interface metagame itemdb itemdb_adjust itemdb_parse parse dvec2 input level coord ai inputsnag os float cfcommon coord_boolean player metagame_config shop shop_demo shop_info game_ai game_effects color metagame_tween cfc game_tank game_util game_projectile socket httpd recorder generators audio itemdb_httpd test regex shop_layout perfbar adler32 money stream stream_file itemdb_stream res_interface settings dumper audit stream_gz dumper_registry version
GAMECXXFLAGS := @GAMECXXFLAGS@ $(STDCXXFLAGS) -DNOEXIT
GAMELDFLAGS := @GAMELDFLAGS@ $(STDLDFLAGS) -lz

EDITORSOURCES := vecedit vecedit_main debug os util gfx float coord parse color dvec2 cfcommon input itemdb itemdb_adjust itemdb_parse args regex rng adler32 money perfbar timer stream stream_file itemdb_stream image
# rng is not really needed since it won't be linked in at all, but it's easier to just include it
EDITORCXXFLAGS := `@WX@ --cxxflags` -DNOSDL $(STDCXXFLAGS)
EDITORLDFLAGS := `@WX@ --libs --gl-libs` -lopengl32 $(STDLDFLAGS) -lpng

REPORTERSOURCES := reporter_main debug os util parse
REPORTERCXXFLAGS := $(STDCXXFLAGS) -DCURL_STATICLIB
REPORTERLDFLAGS :=  $(STDLDFLAGS) -lcurl -lz -lws2_32

MERGERSOURCES := merger debug os util parse itemdb itemdb_adjust itemdb_parse args color dvec2 float coord cfcommon merger_weapon merger_bombardment merger_tanks merger_glory merger_util merger_upgrades merger_factions regex rng adler32 money stream stream_file itemdb_stream dumper_registry
# some of these aren't really needed since they won't be linked in at all, but it's easier to just include them
ODS2CSVSOURCES := ods2csv debug os util parse adler32 minizip/unzip minizip/ioapi
CONSOLECXXFLAGS := $(STDCXXFLAGS) -O0
CONSOLELDFLAGS := $(STDLDFLAGS) -O0


BASEDATADIRS := $(shell find data_source/* -type d | grep -v \.svn | sed 's^data_source/\(.*\)^\1^')

MERGETYPES := $(shell ls data_source/base/*.dwh.unmerged | sed 's^data_source\/base\/\(.*\).dwh.unmerged^\1^')
BASEMERGEDATA := $(patsubst %,base/%.dwh,$(MERGETYPES))

BASECOPYDATA := $(shell find data_source/* -type f | grep -v \.svn | grep -v shopcache.dwh | grep -v .unmerged | grep -v .wav | sed 's^data_source/\(.*\)^\1^')
BASEOGGDATA := $(shell find data_source/* -type f | grep -v \.svn | grep -v shopcache.dwh | grep -v .unmerged | grep .wav | sed 's^data_source/\(.*\)^\1^' | sed 's/.wav/.ogg/')

BASEDATA := $(BASEMERGEDATA) $(BASECOPYDATA) $(BASEOGGDATA)

RELEASEDATA := data_release $(patsubst %,data_release/%,$(BASEDATA))
DEMODATA := data_demo $(patsubst %,data_demo/%,$(BASEDATA))
DEPLOYDATA := $(patsubst %,deploy/%,SDL.dll cygogg-0.dll libvorbis-0.dll libvorbisfile-3.dll d-net.exe)

PACKAGESUBDIR := sekret

CXX := g++
CC := gcc

justdnet: d-net

include $(patsubst %,build/%.g.d,$(GAMESOURCES))
include $(patsubst %,build/%.e.d,$(EDITORSOURCES))
include $(patsubst %,build/%.r.d,$(REPORTERSOURCES))
include $(patsubst %,build/%.c.d,$(MERGERSOURCES))
include $(patsubst %,build/%.c.d,$(ODS2CSVSOURCES))

d-net: d-net.exe $(RELEASEDATA)
d-net-dbg: d-net-dbg.exe $(RELEASEDATA)
vecedit: vecedit.exe $(RELEASEDATA)
	@
vecedit-dbg: vecedit-dbg.exe $(RELEASEDATA)

d-net.exe: $(patsubst %,build/%.g.o,$(GAMESOURCES)) build/resource.res
	nice ./ewrap $@ $(CXX) -o $@ $(patsubst %,build/%.g.o,$(GAMESOURCES)) build/resource.res $(GAMELDFLAGS)

d-net-dbg.exe: $(patsubst %,build/%.g.d.o,$(GAMESOURCES)) build/resource.res
	nice ./ewrap $@ $(CXX) -o $@ $(patsubst %,build/%.g.d.o,$(GAMESOURCES)) build/resource.res $(GAMELDFLAGS)

vecedit.exe: $(patsubst %,build/%.e.o,$(EDITORSOURCES))
	nice ./ewrap $@ $(CXX) -o $@ $(patsubst %,build/%.e.o,$(EDITORSOURCES)) $(EDITORLDFLAGS)
  
vecedit-dbg.exe: $(patsubst %,build/%.e.d.o,$(EDITORSOURCES))
	nice ./ewrap $@ $(CXX) -o $@ $(patsubst %,build/%.e.d.o,$(EDITORSOURCES)) $(EDITORLDFLAGS)

reporter: reporter.exe
reporter.exe: $(patsubst %,build/%.r.o,$(REPORTERSOURCES))
	nice ./ewrap $@ $(CXX) -o $@ $(patsubst %,build/%.r.o,$(REPORTERSOURCES)) $(REPORTERLDFLAGS)

all: d-net vecedit

#asm: $(GAMESOURCES:=.S) makefile

clean:
	rm -rf build/*.o *.exe build/*.d build/*.S build/*.csv build/*.nsi data_release data_demo version.cpp

LOCALFLAGS = --writetarget=dumps/dump --nofullscreen --noaudio --perfbar --httpd_port=616 --runTests
STDRUN = $(LOCALFLAGS) --debugitems --startingPhase=8 --debugControllers=2 --factionMode=3 --nullControllers=11 --writeTarget= --auto_newgame --nocullShopTree --httpd_port=616 --checksumgamestate --noshopcache --nofastForwardOnNoCache

run: d-net
	./d-net.exe $(STDRUN)

demo: d-net.exe $(DEMODATA)
	./d-net.exe $(STDRUN) --fileroot=data_demo
  
basicrun: d-net
	./d-net.exe $(LOCALFLAGS)

cacherun: d-net
	./d-net.exe $(STDRUN) --shopcache

threerun: d-net
	./d-net.exe $(STDRUN) --debugControllers=3
  
debugrun: d-net-dbg
	./d-net-dbg.exe $(STDRUN)

debugbasicrun: d-net-dbg
	./d-net-dbg.exe $(LOCALFLAGS)

ai: d-net
	./d-net.exe $(LOCALFLAGS) --aiCount=16 --fastForwardTo=100000000 --factionMode=3 --nullcontrollers=19 --allowAisQuit --treatAiAsHuman --noshopcache

aisc: d-net data/shopcache.dwh
	./d-net.exe $(LOCALFLAGS) --aiCount=16 --fastForwardTo=100000000 --factionMode=3 --nullcontrollers=19 --allowAisQuit --treatAiAsHuman

ailoop: d-net
	while nice ./d-net.exe $(LOCALFLAGS) --aiCount=12 --fastForwardTo=100000000 --factionmode=3 --terminateAfter=3600 --startingPhase=0 --allowAisQuit --treatAiAsHuman --nullcontrollers=19 --noshopcache ; do echo Cycle. ; done

AICSLFLAGS = $(LOCALFLAGS) --fastForwardTo=100000000 --noshopcache --treatAiAsHuman --randomizeFrameRender=60 

aichecksumloop: d-net
	while nice rm -f dumps/dump-*.dnd && nice ./d-net.exe $(AICSLFLAGS) --factionmode=3 --allowAisQuit --startingPhase=7 --aiCount=6 --terminateAfter=300 --nullcontrollers=5 --treataiashuman && sleep 2s && nice ./d-net.exe $(AICSLFLAGS) --readtarget=`ls dumps/dump-*.dnd` --writetarget= && sleep 2s ; do echo Cycle. ; done
  
veced: vecedit
	./vecedit.exe

###################################
# Object files

build/%.g.o: %.cpp
	nice ./ewrap $@ $(CXX) $(GAMECXXFLAGS) -c -o $@ $<
  
build/%.g.d.o: %.cpp
	nice ./ewrap $@ $(CXX) $(GAMECXXFLAGS) -c -o $@ $<

build/%.g.S: %.cpp
	nice ./ewrap $@ $(CXX) $(GAMECXXFLAGS) -c -Wa,-a,-ad $< > $@

build/%.g.d: %.cpp
	nice bash -ec './ewrap $@ $(CXX) $(GAMECXXFLAGS) -MM $< | sed "s!$*.o!build/$*.g.o build/$*.g.d.o $@!g" > $@'

build/%.e.o: %.cpp
	nice ./ewrap $@ $(CXX) $(EDITORCXXFLAGS) -c -o $@ $<
  
build/%.e.d.o: %.cpp
	nice ./ewrap $@ $(CXX) $(EDITORCXXFLAGS) -c -o $@ $<

build/%.e.S: %.cpp
	nice ./ewrap $@ $(CXX) $(EDITORCXXFLAGS) -c -Wa,-a,-ad $< > $@

build/%.e.d: %.cpp
	nice bash -ec './ewrap $@ $(CXX) $(EDITORCXXFLAGS) -MM $< | sed "s!$*.o!build/$*.e.o build/$*.e.d.o $@!g" > $@'

build/%.r.o: %.cpp
	nice ./ewrap $@ $(CXX) $(REPORTERCXXFLAGS) -c -o $@ $<
  
build/%.r.d.o: %.cpp
	nice ./ewrap $@ $(CXX) $(REPORTERCXXFLAGS) -c -o $@ $<

build/%.r.S: %.cpp
	nice ./ewrap $@ $(CXX) $(REPORTERCXXFLAGS) -c -Wa,-a,-ad $< > $@

build/%.r.d: %.cpp
	nice bash -ec './ewrap $@ $(CXX) $(REPORTERCXXFLAGS) -MM $< | sed "s!$*.o!build/$*.r.o build/$*.r.d.o $@!g" > $@'

build/%.c.o: %.cpp
	nice ./ewrap $@ $(CXX) $(CONSOLECXXFLAGS) -c -o $@ $<

# Any C files aren't ours, so we disable warnings
build/%.c.o: %.c
	nice $(CC) $(CONSOLECXXFLAGS) -w -c -o $@ $<

build/%.c.S: %.cpp
	nice ./ewrap $@ $(CXX) $(CONSOLECXXFLAGS) -c -Wa,-a,-ad $< > $@

build/%.c.d: %.cpp
	nice bash -ec './ewrap $@ $(CXX) $(CONSOLECXXFLAGS) -MM $< | sed "s!$*.o!build/$*.c.o build/$*.c.d.o $@!g" > $@'

build/%.c.d: %.c
	nice bash -ec './ewrap $@ $(CXX) $(CONSOLECXXFLAGS) -MM $< | sed "s!$*.o!build/$*.c.o build/$*.c.d.o $@!g" > $@'

build/%.res: %.rc
	nice windres $< -O coff -o $@

###################################
# Installers

fastdemopackage: build/installer_demo.nsi $(DEMODATA) $(DEPLOYDATA)
	/cygdrive/c/Program\ Files\ \(x86\)/NSIS/makensis.exe - < $<

demopackage: build/installer_demo_shopcache.nsi $(DEMODATA) $(DEPLOYDATA)
	/cygdrive/c/Program\ Files\ \(x86\)/NSIS/makensis.exe - < $<

fastreleasepackage: build/installer_release.nsi $(RELEASEDATA) $(DEPLOYDATA)
	/cygdrive/c/Program\ Files\ \(x86\)/NSIS/makensis.exe - < $<

releasepackage: build/installer_release_shopcache.nsi $(RELEASEDATA) $(DEPLOYDATA)
	/cygdrive/c/Program\ Files\ \(x86\)/NSIS/makensis.exe - < $<

###################################
# Custom files

build/installer_demo_shopcache.nsi: makeinstaller.py version_data $(DEMODATA) $(DEPLOYDATA) demo_data/shopcache.dwh
	./makeinstaller.py data_demo version_data < installer.nsi.template > $@

build/installer_demo.nsi: makeinstaller.py version_data $(DEMODATA) $(DEPLOYDATA)
	./makeinstaller.py data_demo version_data < installer.nsi.template > $@

build/installer_release_shopcache.nsi: makeinstaller.py version_data $(DEMODATA) $(DEPLOYDATA) demo_release/shopcache.dwh
	./makeinstaller.py data_release version_data < installer.nsi.template > $@

build/installer_release.nsi: makeinstaller.py version_data $(DEMODATA) $(DEPLOYDATA)
	./makeinstaller.py data_release version_data < installer.nsi.template > $@

version.cpp: version_gen.py version_data
	./version_gen.py < version_data > $@

deploy:
	mkdir deploy

data_demo/%.ogg: data_source/%.wav
	oggenc -q 6 -o $@ $<

data_release/%.ogg: data_source/%.wav
	oggenc -q 6 -o $@ $<

###################################
# Data files and data structure generation

data_release data_demo:
	mkdir $@
	mkdir $(patsubst %,$@/%,$(BASEDATADIRS))

define COPIER_TEMPLATE
$(1): $(2) $(3)
	cp $$< $$@
endef

$(foreach item,$(BASECOPYDATA),$(eval $(call COPIER_TEMPLATE,$(patsubst %,data_release/%,$(item)),$(patsubst %,data_source/%,$(item)),data_release)))
$(foreach item,$(BASECOPYDATA),$(eval $(call COPIER_TEMPLATE,$(patsubst %,data_demo/%,$(item)),$(patsubst %,data_source/%,$(item)),data_demo)))

data_demo/base/tank.dwh: data_demo/base/weapon_sparker.dwh
data_release/base/tank.dwh: data_release/base/weapon_sparker.dwh

data_demo/base/factions.dwh: $(patsubst data_source/%,data_demo/%,$(shell ls data_source/base/faction_icons/*))
data_release/base/factions.dwh: $(patsubst data_source/%,data_release/%,$(shell ls data_source/base/faction_icons/*))

data_release/base/%.dwh: data_source/base/%.dwh.unmerged build/notes_%.csv merger.exe data_release/base/hierarchy.dwh
	./merger.exe build/notes_$*.csv data_source/base/$*.dwh.unmerged $@ --fileroot=data_release || ( rm -f $@ && false )

data_demo/base/%.dwh: data_source/base/%.dwh.unmerged build/notes_%.csv merger.exe data_release/base/hierarchy.dwh
	./merger.exe build/notes_$*.csv data_source/base/$*.dwh.unmerged $@ --fileroot=data_demo --demo || ( rm -f $@ && false )


data_release/shopcache.dwh: d-net.exe $(RELEASEDATA)
	./d-net.exe --generateCachedShops=0.99 --fileroot=data_release || ( rm -f $@ && false )

data_demo/shopcache.dwh: d-net.exe $(DEMODATA)
	./d-net.exe --generateCachedShops=0.99 --fileroot=data_demo || ( rm -f $@ && false )


export: d-net tools/generateWeaponGraph.py
	./d-net.exe --generateWeaponStats || ( rm -f $@ && false )
	/cygdrive/c/Python25/python.exe tools/generateWeaponGraph.py # this is not ideal
  
merger.exe: $(patsubst %,build/%.c.o,$(MERGERSOURCES))
	nice ./ewrap $@ $(CXX) -o $@ $(patsubst %,build/%.c.o,$(MERGERSOURCES)) $(CONSOLELDFLAGS)

ods2csv.exe: $(patsubst %,build/%.c.o,$(ODS2CSVSOURCES))
	nice ./ewrap $@ $(CXX) -o $@ $(patsubst %,build/%.c.o,$(ODS2CSVSOURCES)) $(CONSOLELDFLAGS) -lxerces-c -lz

$(patsubst %,build/notes_%.csv,$(MERGETYPES)): notes.ods ods2csv.exe
	./ods2csv.exe $@ notes.ods $(patsubst build/notes_%.csv,%,$@) || ( rm -f $@ && false )


define DLLer
deploy/$(1): deploy
	cp /usr/mingw/local/bin/$(1) $$@
	strip -s $$@
endef

$(eval $(call DLLer,SDL.dll))
$(eval $(call DLLer,cygogg-0.dll))
$(eval $(call DLLer,libvorbis-0.dll))
$(eval $(call DLLer,libvorbisfile-3.dll))

deploy/d-net.exe: d-net.exe deploy
	cp d-net.exe $@
	strip -s $@
