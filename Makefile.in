
STDCPPFLAGS = @STDCPPFLAGS@ -Wall -Wno-sign-compare -Wno-uninitialized -g -O2
STDLDFLAGS = -g

GAMESOURCES = main core game timer debug gfx collide gamemap util rng args interface metagame itemdb parse dvec2 input level coord ai inputsnag os float cfcommon coord_boolean player itemdb_adjust metagame_config shop shop_demo shop_info game_ai game_effects color metagame_tween cfc game_tank game_util game_projectile socket httpd recorder generators audio itemdb_httpd test
GAMECPPFLAGS = @GAMECPPFLAGS@ $(STDCPPFLAGS) -DNOEXIT
GAMELDFLAGS = @GAMELDFLAGS@ -g $(STDLDFLAGS)

EDITORSOURCES = vecedit vecedit_main debug os util gfx float coord parse color dvec2 cfcommon input itemdb itemdb_adjust args rng  # rng is not really needed since it won't be linked in at all, but it's easier to just include it
# there are obviously portability issues here
EDITORCPPFLAGS = `wx-config --cxxflags` $(STDCPPFLAGS)
EDITORLDFLAGS = `wx-config --libs --gl-libs` -lopengl32 $(STDLDFLAGS)

FUNCTORSOURCES = functor_gen debug os util parse
MERGERSOURCES = merger debug os util parse
CONSOLECPPFLAGS = $(STDCPPFLAGS)
CONSOLELDFLAGS = $(STDLDFLAGS)

OO = "@OO@"

DATAFILES = $(shell find data | grep -v \.svn | grep -v shopcache.dwh)
PROTOWEAPONTYPES = $(ls data/base/weapon*.dwh.proto | sed 's/\(.*\).dwh.proto/\1/')
PROTOWEAPONCSVS = $(ls data/base/weapon*.dwh.proto | sed 's/\(.*\).dwh.proto/notes_\1.csv/')

CPP = g++

all: d-net.exe

include $(GAMESOURCES:=.g.d)
include $(EDITORSOURCES:=.e.d)
include $(FUNCTORSOURCES:=.c.d)
include $(MERGERSOURCES:=.c.d)

all: d-net.exe vecedit.exe

d-net.exe: $(GAMESOURCES:=.g.o)
	nice $(CPP) -o $@ $(GAMESOURCES:=.g.o) $(GAMELDFLAGS)

d-net-dbg.exe: $(GAMESOURCES:=.g.d.o)
	nice $(CPP) -o $@ $(GAMESOURCES:=.g.d.o) $(GAMELDFLAGS)

vecedit.exe: $(EDITORSOURCES:=.e.o)
	nice $(CPP) -o $@ $(EDITORSOURCES:=.e.o) $(EDITORLDFLAGS)
  
vecedit-dbg.exe: $(EDITORSOURCES:=.e.d.o)
	nice $(CPP) -o $@ $(EDITORSOURCES:=.e.d.o) $(EDITORLDFLAGS)

asm: $(GAMESOURCES:=.S) makefile

clean:
	rm -rf *.o *.exe *.d *.S data/shopcache.dwh

STDRUN = --nofullscreen --debugitems --startingPhase=8 --debugControllers=2 --factionMode=3 --nullControllers=11 --writeTarget= --auto_newgame --nocullShopTree --httpd_port=616 --noshopcache --runTests

run: d-net.exe
	./d-net.exe $(STDRUN)
  
basicrun: d-net.exe
	./d-net.exe --nofullscreen --writeTarget= --httpd_port=616

cacherun: d-net.exe
	./d-net.exe $(STDRUN) --shopcache

threerun: d-net.exe
	./d-net.exe $(STDRUN) --debugControllers=3
  
debugrun: d-net-dbg.exe
	./d-net-dbg.exe $(STDRUN)

debugbasicrun: d-net-dbg.exe
	./d-net-dbg.exe --nofullscreen --writeTarget= --httpd_port=616

ai: d-net.exe
	./d-net.exe --nofullscreen --aiCount=16 --fastForwardTo=100000000 --factionMode=0 --noshopcache

aisc: d-net.exe data/shopcache.dwh
	./d-net.exe --nofullscreen --aiCount=16 --fastForwardTo=100000000 --factionMode=3

ailoop: d-net.exe
	while ./d-net.exe --nofullscreen --aiCount=12 --fastForwardTo=100000000 --terminateAfter=600 --startingPhase=8 --httpd_port=616 --noshopcache ; do echo Cycle. ; done

veced: vecedit.exe
	./vecedit.exe

define prepackage
rm \\\\192.168.100.4\\zorba\\www\\d-net\\Dnet\ Latest\ Windows.zip || true
mkdir deploy
cp d-net.exe deploy
cp c:/cygwin/usr/local/bin/SDL.dll deploy
cp /usr/ogg/bin/* deploy
cp -r data deploy
mkdir deploy/dumps
cp dumps/readme.txt deploy/dumps
rm -f deploy/data/coordfailure
endef

define strip
strip -s deploy/*.exe deploy/*.dll
endef

define postpackage
cd deploy ; rm -rf `find | grep \.svn`
cd deploy ; find | grep \.wav | xargs oggenc -q 6
cd deploy ; rm -rf `find | grep \.wav`
cd deploy ; zip -9 -r \\\\192.168.100.4\\zorba\\www\\d-net\\Dnet\ Latest\ Windows.zip *  # This is really too many backslashes.
cp \\\\192.168.100.4\\zorba\\www\\d-net\\Dnet\ Latest\ Windows.zip `date +\\\\\\\\192.168.100.4\\\\zorba\\\\www\\\\d-net\\\\dnet%G%m%d%H%M%S.zip` # This is really too many backslashes.
rm -rf deploy
endef

package: d-net.exe data/shopcache.dwh
	$(prepackage)
	$(strip)
	$(postpackage)

packageed: d-net.exe vecedit.exe data/shopcache.dwh
	$(prepackage)
	cp vecedit.exe deploy
	cp c:/cygwin/bin/cygz.dll deploy
	cp c:/cygwin/usr/local/lib/cygwxbase28_gcc_custom-0.dll deploy
	cp c:/cygwin/usr/local/lib/cygwxmsw28_core_gcc_custom-0.dll deploy
	cp c:/cygwin/usr/local/lib/cygwxmsw28_gl_gcc_custom-0.dll deploy
	cp -r vecedit deploy
	$(strip)
	cp c:/cygwin/bin/cygwin1.dll deploy # for some reason stripping this makes things break badly
	$(postpackage)
	cp \\\\192.168.100.4\\zorba\\www\\d-net\\Dnet\ Latest\ Windows.zip \\\\192.168.100.4\\zorba\\www\\d-net\\Dnet\ Latest\ Editor.zip

%.g.o: %.cpp
	nice $(CPP) $(GAMECPPFLAGS) -c -o $@ $<
  
%.g.d.o: %.cpp
	nice $(CPP) $(GAMECPPFLAGS) -c -o $@ $<

%.g.S: %.cpp
	nice $(CPP) $(GAMECPPFLAGS) -c -g -Wa,-a,-ad $< > $@

%.g.d: %.cpp
	nice bash -ec '$(CPP) $(GAMECPPFLAGS) -MM $< | sed "s!$*.o!$*.g.o $*.g.d.o $@!g" > $@'

%.e.o: %.cpp
	nice $(CPP) $(EDITORCPPFLAGS) -c -o $@ $<
  
%.e.d.o: %.cpp
	nice $(CPP) $(EDITORCPPFLAGS) -c -o $@ $<

%.e.S: %.cpp
	nice $(CPP) $(EDITORCPPFLAGS) -c -g -Wa,-a,-ad $< > $@

%.e.d: %.cpp
	nice bash -ec '$(CPP) $(EDITORCPPFLAGS) -MM $< | sed "s!$*.o!$*.e.o $*.e.d.o $@!g" > $@'

%.c.o: %.cpp
	nice $(CPP) $(CONSOLECPPFLAGS) -c -o $@ $<
  
%.c.d.o: %.cpp
	nice $(CPP) $(CONSOLECPPFLAGS) -c -o $@ $<

%.c.S: %.cpp
	nice $(CPP) $(CONSOLECPPFLAGS) -c -g -Wa,-a,-ad $< > $@

%.c.d: %.cpp
	nice bash -ec '$(CPP) $(CONSOLECPPFLAGS) -MM $< | sed "s!$*.o!$*.e.o $*.e.d.o $@!g" > $@'

data/shopcache.dwh: d-net.exe $(DATAFILES)
	d-net.exe --generateCachedShops=0.99

export: d-net.exe tools/generateWeaponGraph.py
	d-net.exe --generateWeaponStats
	/cygdrive/c/Python25/python.exe tools/generateWeaponGraph.py # this is not ideal

functor_gen.exe: $(FUNCTORSOURCES:=.c.o)
	nice $(CPP) -o $@ $(FUNCTORSOURCES:=.c.o) $(CONSOLELDFLAGS)

functor.h: functor_gen.exe functor.h.in
	./functor_gen.exe
  
merger.exe: $(MERGERSOURCES:=.c.o)
	nice $(CPP) -o $@ $(MERGERSOURCES:=.c.o) $(CONSOLELDFLAGS)

notes_tanks.csv $(PROTOWEAPONCSVS): notes.ods
	$(OO) -invisible "notes.ods" "macro://notes/Standard.Convert.Convert"

data/base/%.dwh: data/base/%.dwh.proto notes_%.csv
	echo test

stats:
	@echo Graphics: `cat gfx.h gfx.cpp game_effects.h game_effects.cpp color.h color.cpp | wc -l` loc
	@echo Sound: `cat audio.h audio.cpp | wc -l` loc
	@echo Collisions: `cat collide.h collide.cpp | wc -l` loc
	@echo Game mechanics: `cat game.h game.cpp gamemap.h gamemap.cpp level.cpp level.h player.cpp player.h game_tank.cpp game_tank.h game_util.cpp game_util.h game_projectile.h game_projectile.cpp | wc -l` loc
	@echo Item hierarchy: `cat itemdb.h itemdb.cpp parse.h parse.cpp itemdb_adjust.cpp | wc -l` loc
	@echo UI: `cat interface.h interface.cpp metagame.h metagame.cpp metagame_config.cpp metagame_config.h shop.cpp shop.h shop_demo.cpp shop_demo.h shop_info.cpp shop_info.h game_ai.h game_ai.cpp metagame_tween.cpp metagame_tween.h | wc -l` loc
	@echo Framework: `cat core.h core.cpp main.cpp input.h input.cpp inputsnag.h inputsnag.cpp os.h os.cpp debug.h debug.cpp recorder.h recorder.cpp generators.h generators.cpp | wc -l` loc
	@echo Util: `cat timer.h timer.cpp util.h util.cpp args.h args.cpp rng.h rng.cpp coord.h coord.cpp float.h float.cpp cfcommon.h cfcommon.cpp coord_boolean.cpp cfc.h cfc.cpp smartptr.h functor.h | wc -l` loc
	@echo Networking: `cat httpd.h httpd.cpp socket.h socket.cpp | wc -l` loc
	@echo Vector system: `cat dvec2.h dvec2.cpp | wc -l` loc
	@echo Vector editor: `cat vecedit.cpp vecedit.h vecedit_main.cpp | wc -l` loc
	@echo AI: `cat ai.h ai.cpp | wc -l` loc
	@echo Infrastructure: `cat Makefile.in configure.in | wc -l` loc
	@echo Total code: `cat *.h *.cpp Makefile.in configure.in | wc -l` loc
	@echo Datafiles: `cd data; cat \`find -type f | grep -v .svn\` | wc -l` lines
